import { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";

type PolicyOperation = 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE' | 'ALL';

declare module '@supabase/supabase-js' {
  interface Database {
    public: {
      Functions: {
        create_policy: {
          Args: {
            bucket_name: string;
            policy_name: string;
            policy_def: string;
            operations: PolicyOperation[];
          };
          Returns: { data: any; error: any };
        };
      };
    };
  }
}
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/components/ui/use-toast";
import { LogOut, AlertCircle, Clock, Wrench, CheckCircle2, AlertTriangle, Upload, Image as ImageIcon, Droplets, MapPin, Calendar, FileText, Camera } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { format } from "date-fns";
import { useIsMobile } from "@/hooks/use-mobile";

// Types
type ReportStatus = 'pending' | 'assigned' | 'in_progress' | 'completed';

interface PipeReport {
  id: string;
  resident_name: string;
  address: string;
  description: string;
  photo_url: string;
  latitude: number;
  longitude: number;
  status: ReportStatus;
  created_at: string;
  updated_at: string;
}

interface WaterSchedule {
  id: string;
  area: string;
  open_time: string;
  close_time: string;
  status: 'scheduled' | 'delayed' | 'completed' | 'cancelled';
  reason?: string;
  date: string;
}

const ResidentDashboard = () => {
  const { user, profile, signOut, loading } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [reports, setReports] = useState<PipeReport[]>([]);
  const [notification, setNotification] = useState<{ message: string; type: 'info' | 'error' | 'success' | 'warning' } | null>(null);
  const [schedules, setSchedules] = useState<WaterSchedule[]>([]);
  const [activeTab, setActiveTab] = useState('report');
  const [formData, setFormData] = useState({
    resident_name: '',
    address: '',
    description: '',
    photo: null as File | null,
  });
  const { toast } = useToast();
  const isMobile = useIsMobile();
  const navigate = useNavigate();
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Water schedule state
  const [waterSchedule, setWaterSchedule] = useState<WaterSchedule>({
    id: '1',
    area: 'Your Area',
    open_time: '08:00',
    close_time: '10:00',
    status: 'scheduled',
    date: new Date().toISOString().split('T')[0],
  });
  
  // Storage initialization disabled - using backend API
  // const initializeStorage = async () => {
  //   // Disabled - backend handles storage
  // };

  // Form validation
  const validateForm = () => {
    if (!formData.resident_name.trim()) {
      toast({
        title: 'Error',
        description: 'Please enter your name',
        variant: 'destructive',
      });
      return false;
    }
    if (!formData.address.trim()) {
      toast({
        title: 'Error',
        description: 'Please enter the address',
        variant: 'destructive',
      });
      return false;
    }
    if (!formData.description.trim()) {
      toast({
        title: 'Error',
        description: 'Please describe the issue',
        variant: 'destructive',
      });
      return false;
    }
    return true;
  };

  // Check for notifications
  useEffect(() => {
    const checkWaterSchedule = () => {
      const now = new Date();
      if (!waterSchedule) return;
      
      const [openHour, openMinute] = waterSchedule.open_time.split(':').map(Number);
      const [closeHour, closeMinute] = waterSchedule.close_time.split(':').map(Number);
      
      const openTime = new Date();
      openTime.setHours(openHour, openMinute, 0, 0);
      
      const closeTime = new Date();
      closeTime.setHours(closeHour, closeMinute, 0, 0);
      
      // Check if current time is within 10 minutes of opening
      const tenMinutesBefore = new Date(openTime.getTime() - 10 * 60 * 1000);
      
      if (now >= tenMinutesBefore && now < openTime) {
        setNotification({
          message: `Water supply will start at ${waterSchedule.open_time}`,
          type: 'info'
        });
      } else if (now >= openTime && now <= closeTime) {
        // Check if water is closed before schedule
        if (waterSchedule.status === 'cancelled' || waterSchedule.status === 'delayed') {
          setNotification({
            message: `Water supply interrupted: ${waterSchedule.reason || 'No reason provided'}`,
            type: 'error'
          });
        } else {
          setNotification({
            message: `Water supply is currently open until ${waterSchedule.close_time}`,
            type: 'info'
          });
        }
      }
    };

    const interval = setInterval(checkWaterSchedule, 60000); // Check every minute
    checkWaterSchedule(); // Initial check
    
    return () => clearInterval(interval);
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFormData(prev => ({ ...prev, photo: e.target.files![0] }));
    }
  };

  const handleSubmitReport = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      // 1. Get current authenticated user
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      if (authError || !authUser) {
        throw new Error(authError?.message || 'User not authenticated');
      }

      // 2. Get or create user profile
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', authUser.id)
        .single();

      if (profileError && !profileError.message.includes('No rows found')) {
        console.error('Profile error:', profileError);
        throw new Error('Failed to fetch user profile');
      }

      // Create profile if it doesn't exist
      if (!profile) {
        const { error: createProfileError } = await supabase
          .from('profiles')
          .insert([{ 
            id: authUser.id,
            full_name: formData.resident_name || 'User',
            role: 'user',
            address: formData.address || '',
            phone: '',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }])
          .select()
          .single();
        
        if (createProfileError) {
          console.error('Create profile error:', createProfileError);
          throw new Error('Failed to create user profile');
        }
      }

      // 3. Handle File Upload
      let photoUrl = '';
      if (formData.photo) {
        try {
          const fileExt = formData.photo.name.split('.').pop();
          const fileName = `${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
          const filePath = `reports/${authUser.id}/${Date.now()}_${fileName}`;
          
          // Upload file with retry logic
          const uploadFile = async (attempt = 1): Promise<void> => {
            try {
              const { error: uploadError } = await supabase.storage
                .from('pipe-reports')
                .upload(filePath, formData.photo!, {
                  cacheControl: '3600',
                  upsert: false,
                  contentType: formData.photo!.type
                });

              if (uploadError) throw uploadError;
              
            } catch (error: any) {
              if (error.message.includes('bucket not found') && attempt === 1) {
                // Create bucket and retry
                const { error: bucketError } = await supabase.storage.createBucket('pipe-reports', {
                  public: true,
                  allowedMimeTypes: ['image/*'],
                  fileSizeLimit: 5 * 1024 * 1024, // 5MB
                });
                
                if (bucketError) throw bucketError;
                return uploadFile(2); // Retry after creating bucket
              }
              throw error;
            }
          };

          await uploadFile();
          
          // Get the public URL
          const { data: { publicUrl } } = supabase.storage
            .from('pipe-reports')
            .getPublicUrl(filePath);
            
          photoUrl = publicUrl;
        } catch (error) {
          console.error('File upload error:', error);
          toast({
            title: 'Warning',
            description: 'File upload failed. Submitting report without photo.',
            variant: 'destructive',
          });
        }
      }
      
      // 4. Get user's current location
      let latitude: number | null = null;
      let longitude: number | null = null;
      
      try {
        if (navigator.geolocation) {
          const position = await new Promise<GeolocationPosition | null>((resolve) => {
            navigator.geolocation.getCurrentPosition(
              resolve,
              (error) => {
                console.warn('Geolocation error:', error);
                resolve(null);
              },
              { 
                enableHighAccuracy: true,
                timeout: 10000, // Increased timeout
                maximumAge: 0 
              }
            );
          });
          
          if (position) {
            latitude = position.coords.latitude;
            longitude = position.coords.longitude;
          }
        }
      } catch (error) {
        console.error('Error getting location:', error);
      }
      
      // 5. Save report to database with transaction
      const reportData = {
        user_id: authUser.id,
        full_name: formData.resident_name || 'Anonymous',
        address: formData.address || 'Not specified',
        notes: formData.description || '',
        photo_url: photoUrl,
        location_lat: latitude,
        location_lng: longitude,
        status: 'pending' as const,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      console.log('Submitting report with data:', reportData);
      
      const { data, error: insertError } = await supabase
        .from('pipe_reports')
        .insert(reportData)
        .select()
        .single();
        
      if (insertError) {
        console.error('Database insert error:', insertError);
        throw new Error(`Failed to save report: ${insertError.message}`);
      }
      
      // Update local state with the new report
      if (data) {
        const newReport = {
          ...data,
          resident_name: data.full_name,
          description: data.notes || '',
          latitude: data.location_lat,
          longitude: data.location_lng,
        };
        setReports(prev => [...prev, newReport as PipeReport]);
      }
      
      // Reset form
      setFormData({
        resident_name: '',
        address: '',
        description: '',
        photo: null,
      });
      
      toast({
        title: 'Report Submitted',
        description: 'Your pipe damage report has been submitted successfully.',
      });
      
    } catch (error) {
      console.error('Error submitting report:', error);
      toast({
        title: 'Error',
        description: 'Failed to submit report. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const getStatusBadge = (status: ReportStatus) => {
    const statusConfig = {
      pending: { text: 'Pending', icon: <Clock className="h-4 w-4" />, color: 'bg-warning/20 text-warning border-warning/30' },
      assigned: { text: 'Assigned', icon: <Wrench className="h-4 w-4" />, color: 'bg-primary/20 text-primary border-primary/30' },
      in_progress: { text: 'In Progress', icon: <Wrench className="h-4 w-4" />, color: 'bg-secondary/20 text-secondary border-secondary/30' },
      completed: { text: 'Completed', icon: <CheckCircle2 className="h-4 w-4" />, color: 'bg-success/20 text-success border-success/30' },
    };
    
    const config = statusConfig[status] || statusConfig.pending;
    
    return (
      <span className={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-semibold border-2 shadow-sm ${config.color}`}>
        {config.icon}
        <span>{config.text}</span>
      </span>
    );
  };

  useEffect(() => {
    if (!loading && !user) {
      console.log("User not authenticated, redirecting to auth");
      navigate("/auth");
    }
  }, [user, loading, navigate]);

  const handleSignOut = async () => {
    try {
      await signOut();
      navigate("/auth");
    } catch (error) {
      console.error("Error signing out:", error);
      toast({
        title: "Error",
        description: "Failed to sign out. Please try again.",
        variant: "destructive",
      });
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle>Session Expired</CardTitle>
            <CardDescription>Please sign in again to continue.</CardDescription>
          </CardHeader>
          <CardContent>
            <Button onClick={() => navigate('/auth')} className="w-full">
              Go to Sign In
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-hero">
      {/* Notification Banner */}
      {notification && (
        <div className={`${
          notification.type === 'error' ? 'bg-red-50 border-red-200' : 
          notification.type === 'warning' ? 'bg-yellow-50 border-yellow-200' : 
          'bg-blue-50 border-blue-200'
        } border-b p-4 animate-in slide-in-from-top duration-300`}>
          <div className="max-w-7xl mx-auto flex items-center">
            {notification.type === 'error' ? (
              <AlertTriangle className="h-5 w-5 text-red-500 mr-3 animate-pulse" />
            ) : notification.type === 'warning' ? (
              <AlertCircle className="h-5 w-5 text-yellow-500 mr-3 animate-pulse" />
            ) : (
              <Clock className="h-5 w-5 text-blue-500 mr-3 animate-pulse" />
            )}
            <p className={`text-sm font-medium ${
              notification.type === 'error' ? 'text-red-700' : 
              notification.type === 'warning' ? 'text-yellow-700' : 
              'text-blue-700'
            }`}>
              {notification.message}
            </p>
          </div>
        </div>
      )}

      {/* Header with Gradient */}
      <header className="bg-white/80 backdrop-blur-md shadow-md border-b border-border sticky top-0 z-50">
        <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-gradient-primary flex items-center justify-center">
              <Droplets className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold bg-gradient-primary bg-clip-text text-transparent">BlueGrid</h1>
              <p className="text-xs text-muted-foreground">Resident Portal</p>
            </div>
          </div>
          <Button variant="outline" size="sm" onClick={handleSignOut} className="flex items-center gap-2 hover:bg-destructive hover:text-destructive-foreground transition-all">
            <LogOut className="h-4 w-4" />
            Sign Out
          </Button>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-8 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          {/* Welcome Section */}
          <div className="mb-8 text-center">
            <h2 className="text-3xl font-bold bg-gradient-primary bg-clip-text text-transparent mb-2">
              Welcome, {user.email?.split('@')[0] || 'Resident'}!
            </h2>
            <p className="text-muted-foreground">
              Manage your water services and report issues seamlessly
            </p>
          </div>

          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-2 max-w-md mx-auto bg-white/80 backdrop-blur-sm shadow-md p-1">
              <TabsTrigger value="report" className="data-[state=active]:bg-gradient-primary data-[state=active]:text-white">Report Pipe Damage</TabsTrigger>
              <TabsTrigger value="schedule" className="data-[state=active]:bg-gradient-primary data-[state=active]:text-white">Water Schedule</TabsTrigger>
            </TabsList>

            <TabsContent value="report" className="space-y-6">
              <Card className="border-2 shadow-lg hover:shadow-xl transition-shadow duration-300">
                <CardHeader className="bg-gradient-to-r from-primary/5 to-secondary/5 border-b">
                  <div className="flex items-center gap-2">
                    <div className="p-2 bg-primary/10 rounded-lg">
                      <AlertCircle className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <CardTitle className="text-xl">Report Damaged Pipe</CardTitle>
                      <CardDescription className="mt-1">
                        Help us maintain the water infrastructure by reporting issues
                      </CardDescription>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pt-6">
                  <form onSubmit={handleSubmitReport} className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-2">
                        <Label htmlFor="resident_name" className="flex items-center gap-2 text-sm font-medium">
                          <FileText className="h-4 w-4 text-primary" />
                          Your Name
                        </Label>
                        <Input
                          id="resident_name"
                          name="resident_name"
                          value={formData.resident_name}
                          onChange={handleInputChange}
                          required
                          placeholder="John Doe"
                          className="transition-all focus:ring-2 focus:ring-primary/20"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="address" className="flex items-center gap-2 text-sm font-medium">
                          <MapPin className="h-4 w-4 text-primary" />
                          Address
                        </Label>
                        <Input
                          id="address"
                          name="address"
                          value={formData.address}
                          onChange={handleInputChange}
                          required
                          placeholder="123 Main St, City"
                          className="transition-all focus:ring-2 focus:ring-primary/20"
                        />
                      </div>
                      
                      <div className="md:col-span-2 space-y-2">
                        <Label htmlFor="description" className="flex items-center gap-2 text-sm font-medium">
                          <FileText className="h-4 w-4 text-primary" />
                          Damage Description
                        </Label>
                        <Textarea
                          id="description"
                          name="description"
                          value={formData.description}
                          onChange={handleInputChange}
                          required
                          placeholder="Describe the damage in detail (e.g., location, severity, water leakage)..."
                          rows={4}
                          className="transition-all focus:ring-2 focus:ring-primary/20 resize-none"
                        />
                      </div>
                      
                      <div className="md:col-span-2 space-y-2">
                        <Label htmlFor="photo" className="flex items-center gap-2 text-sm font-medium">
                          <Camera className="h-4 w-4 text-primary" />
                          Upload Photo (Optional)
                        </Label>
                        <div className="relative">
                          <Input
                            id="photo"
                            type="file"
                            accept="image/*"
                            onChange={handleFileChange}
                            className="cursor-pointer file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90 transition-all"
                          />
                        </div>
                        {formData.photo && (
                          <p className="text-xs text-muted-foreground flex items-center gap-1">
                            <CheckCircle2 className="h-3 w-3 text-success" />
                            {formData.photo.name}
                          </p>
                        )}
                      </div>
                      
                      <div className="md:col-span-2 pt-2">
                        <Button 
                          type="submit" 
                          disabled={isSubmitting} 
                          className="w-full md:w-auto bg-gradient-primary hover:opacity-90 transition-all shadow-md hover:shadow-lg"
                          size="lg"
                        >
                          {isSubmitting ? (
                            <>
                              <Clock className="mr-2 h-4 w-4 animate-spin" />
                              Submitting...
                            </>
                          ) : (
                            <>
                              <Upload className="mr-2 h-4 w-4" />
                              Submit Report
                            </>
                          )}
                        </Button>
                      </div>
                    </div>
                  </form>
                </CardContent>
              </Card>
              
              {reports.length > 0 && (
                <Card className="border-2 shadow-lg">
                  <CardHeader className="bg-gradient-to-r from-primary/5 to-secondary/5 border-b">
                    <div className="flex items-center gap-2">
                      <div className="p-2 bg-primary/10 rounded-lg">
                        <FileText className="h-5 w-5 text-primary" />
                      </div>
                      <div>
                        <CardTitle className="text-xl">Your Reports</CardTitle>
                        <CardDescription className="mt-1">Track the status of your submitted reports</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="pt-6">
                    <div className="space-y-4">
                      {reports.map((report) => (
                        <div key={report.id} className="border-2 rounded-xl p-5 hover:shadow-md transition-all duration-300 bg-card">
                          <div className="flex justify-between items-start mb-3">
                            <div className="flex-1">
                              <div className="flex items-start gap-2 mb-2">
                                <MapPin className="h-4 w-4 text-primary mt-1 flex-shrink-0" />
                                <h3 className="font-semibold text-lg">{report.address}</h3>
                              </div>
                              <div className="flex items-center gap-2 text-sm text-muted-foreground mb-3">
                                <Calendar className="h-3 w-3" />
                                {format(new Date(report.created_at), 'MMM d, yyyy h:mm a')}
                              </div>
                              <p className="text-sm text-foreground leading-relaxed">{report.description}</p>
                            </div>
                            <div className="ml-4">
                              {getStatusBadge(report.status)}
                            </div>
                          </div>
                          {report.photo_url && (
                            <div className="mt-4 pt-4 border-t">
                              <img 
                                src={report.photo_url} 
                                alt="Damage photo" 
                                className="h-48 w-full rounded-lg object-cover shadow-md hover:shadow-lg transition-shadow"
                              />
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}
            </TabsContent>

            <TabsContent value="schedule" className="space-y-6">
              <Card className="border-2 shadow-lg">
                <CardHeader className="bg-gradient-to-r from-primary/5 to-secondary/5 border-b">
                  <div className="flex items-center gap-2">
                    <div className="p-2 bg-primary/10 rounded-lg">
                      <Clock className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <CardTitle className="text-xl">Water Supply Schedule</CardTitle>
                      <CardDescription className="mt-1">
                        View your area's water supply timings and status
                      </CardDescription>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pt-6">
                  {schedules.length > 0 ? (
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div className="bg-gradient-to-br from-primary/10 to-secondary/10 p-6 rounded-xl border-2 border-primary/20 shadow-md">
                          <div className="flex items-center gap-2 mb-3">
                            <Droplets className="h-5 w-5 text-primary" />
                            <h3 className="text-sm font-semibold text-primary">Today's Schedule</h3>
                          </div>
                          <p className="text-3xl font-bold text-foreground mb-3">
                            {schedules[0].open_time} - {schedules[0].close_time}
                          </p>
                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold shadow-sm ${
                            schedules[0].status === 'scheduled' ? 'bg-success text-success-foreground' :
                            schedules[0].status === 'delayed' ? 'bg-warning text-warning-foreground' :
                            'bg-muted text-muted-foreground'
                          }`}>
                            {schedules[0].status === 'scheduled' ? '✓ As Scheduled' :
                             schedules[0].status === 'delayed' ? '⚠ Delayed' : '✓ Completed'}
                          </span>
                        </div>
                        
                        <div className="bg-card border-2 p-6 rounded-xl md:col-span-2 shadow-md">
                          <h3 className="text-sm font-semibold text-foreground mb-3 flex items-center gap-2">
                            <AlertCircle className="h-4 w-4 text-primary" />
                            Next Supply Information
                          </h3>
                          <p className="text-foreground leading-relaxed">
                            {schedules[0]?.status === 'scheduled' ? (
                              <>
                                <span className="font-medium">Your next water supply is scheduled for today</span> from <span className="font-semibold text-primary">{schedules[0]?.open_time}</span> to <span className="font-semibold text-primary">{schedules[0]?.close_time}</span>.
                                {notification && (
                                  <span className="block mt-3 p-3 bg-blue-50 rounded-lg text-sm text-blue-700 border border-blue-200">
                                    💧 {notification.message}
                                  </span>
                                )}
                              </>
                            ) : schedules[0]?.status === 'delayed' ? (
                              <>
                                <span className="text-warning font-medium">
                                  ⚠ Water supply is currently delayed. {schedules[0]?.reason || 'No reason provided.'}
                                </span>
                                {notification && (
                                  <span className="block mt-3 p-3 bg-yellow-50 rounded-lg text-sm text-yellow-700 border border-yellow-200">
                                    {notification.message}
                                  </span>
                                )}
                              </>
                            ) : (
                              'No upcoming schedule available.'
                            )}
                          </p>
                        </div>
                      </div>
                      
                      <div className="bg-gradient-to-r from-primary/5 to-secondary/5 p-6 rounded-xl border-2 border-primary/10">
                        <h3 className="text-sm font-semibold text-foreground mb-2 flex items-center gap-2">
                          <AlertCircle className="h-4 w-4 text-primary" />
                          Need Help?
                        </h3>
                        <p className="text-sm text-muted-foreground">
                          For any issues with your water supply, please report them using the <span className="font-semibold text-primary">"Report Pipe Damage"</span> tab.
                        </p>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-12">
                      <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                        <Clock className="h-8 w-8 text-muted-foreground" />
                      </div>
                      <p className="text-muted-foreground font-medium">No water schedule available for your area.</p>
                      <p className="text-sm text-muted-foreground mt-2">Check back later for updates.</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>
    </div>
  );
};

export default ResidentDashboard;
